{"version":3,"sources":["components/ProtectedRoute.js","firebase/firebase.js","actions/auth/auth.js","components/Devices.js","components/Home.js","components/Login.js","App.js","reducers/index.js","reducers/auth.js","Root.js","configureStore.js","serviceWorker.js","index.js"],"names":["ProtectedRoute","Component","component","isAuthenticated","isVerifying","rest","render","props","to","pathname","state","from","location","myFirebase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","receiveLogin","firestore","user","type","loginUser","email","password","dispatch","auth","signInWithEmailAndPassword","then","catch","error","logoutUser","signOut","Devices","devices","console","log","Object","keys","map","device","class","deviceName","deviceType","Home","handleLogout","fetch","res","json","data","push","this","isLoggingOut","logoutError","onClick","connect","Login","handleEmailChange","target","setState","value","handlePasswordChange","handleSubmit","classes","loginError","Container","maxWidth","Paper","className","paper","Avatar","avatar","Typography","variant","TextField","margin","fullWidth","id","label","name","onChange","errorText","Button","color","submit","withStyles","body","backgroundColor","marginTop","display","padding","flexDirection","alignItems","marginLeft","marginRight","form","marginBottom","textAlign","isLoggingIn","exact","path","rootReducer","combineReducers","firebaseReducer","action","verifyingError","store","persistedState","createStore","applyMiddleware","thunkMiddleware","onAuthStateChanged","configureStore","Root","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6193e78.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  isVerifying,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      isVerifying ? (\r\n        <div />\r\n      ) : isAuthenticated ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/login\",\r\n            state: { from: props.location }\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nexport default ProtectedRoute;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\n\r\n  const firebaseConfig = {\r\n  apiKey: \"AIzaSyCSvntYCzkfrQ6U53j47OStG9btiiNWNqU\",\r\n  authDomain: \"wetrakph-c627b.firebaseapp.com\",\r\n  databaseURL: \"https://wetrakph-c627b.firebaseio.com\",\r\n  projectId: \"wetrakph-c627b\",\r\n  storageBucket: \"wetrakph-c627b.appspot.com\",\r\n  messagingSenderId: \"561036518593\",\r\n  appId: \"1:561036518593:web:4b12993cf3c1d1488c6040\",\r\n  measurementId: \"G-VG6NXWM46Y\"\r\n};\r\n\r\n\r\nexport const myFirebase = firebase.initializeApp(firebaseConfig);\r\nconst baseDb = myFirebase.firestore();\r\nexport const db = baseDb;\r\n","import { myFirebase } from \"../../firebase/firebase\";\r\n\r\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\r\n\r\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\r\n\r\nexport const VERIFY_REQUEST = \"VERIFY_REQUEST\";\r\nexport const VERIFY_SUCCESS = \"VERIFY_SUCCESS\";\r\n\r\nconst requestLogin = () => {\r\n  return {\r\n    type: LOGIN_REQUEST\r\n  };\r\n};\r\n\r\nconst receiveLogin = user => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    user\r\n  };\r\n};\r\n\r\nconst loginError = () => {\r\n  return {\r\n    type: LOGIN_FAILURE\r\n  };\r\n};\r\n\r\nconst requestLogout = () => {\r\n  return {\r\n    type: LOGOUT_REQUEST\r\n  };\r\n};\r\n\r\nconst receiveLogout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS\r\n  };\r\n};\r\n\r\nconst logoutError = () => {\r\n  return {\r\n    type: LOGOUT_FAILURE\r\n  };\r\n};\r\n\r\nconst verifyRequest = () => {\r\n  return {\r\n    type: VERIFY_REQUEST\r\n  };\r\n};\r\n\r\nconst verifySuccess = () => {\r\n  return {\r\n    type: VERIFY_SUCCESS\r\n  };\r\n};\r\n\r\nexport const loginUser = (email, password) => dispatch => {\r\n  dispatch(requestLogin());\r\n  myFirebase\r\n    .auth()\r\n    .signInWithEmailAndPassword(email, password)\r\n    .then(user => {\r\n      dispatch(receiveLogin(user));\r\n    })\r\n    .catch(error => {\r\n      //Do something with the error if you want!\r\n      dispatch(loginError());\r\n    });\r\n};\r\n\r\nexport const logoutUser = () => dispatch => {\r\n  dispatch(requestLogout());\r\n  myFirebase\r\n    .auth()\r\n    .signOut()\r\n    .then(() => {\r\n      dispatch(receiveLogout());\r\n    })\r\n    .catch(error => {\r\n      //Do something with the error if you want!\r\n      dispatch(logoutError());\r\n    });\r\n};\r\n\r\nexport const verifyAuth = () => dispatch => {\r\n  dispatch(verifyRequest());\r\n  myFirebase.auth().onAuthStateChanged(user => {\r\n    if (user !== null) {\r\n      dispatch(receiveLogin(user));\r\n    }\r\n    dispatch(verifySuccess());\r\n  });\r\n};\r\n","import React from 'react'\r\n\r\nconst Devices = ({ devices }) => {\r\n    console.log(devices);\r\n    return (\r\n    <div>\r\n        <center><h1>Device List</h1></center>\r\n        {Object.keys(devices).map((device) => (\r\n        <div class=\"card\">\r\n            <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{device.deviceName}</h5>\r\n            <h6 class=\"card-subtitle mb-2 text-muted\">{device.deviceName}</h6>\r\n            <p class=\"card-text\">{device.deviceType}</p>\r\n            </div>\r\n        </div>\r\n        ))}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Devices","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../actions/auth\";\r\nimport Devices from \"./Devices\";\r\n\r\nclass Home extends Component {\r\n  handleLogout = () => {\r\n    const { dispatch } = this.props;\r\n    dispatch(logoutUser());\r\n  };\r\n  state = {\r\n    devices: []\r\n  };\r\n  componentDidMount() {\r\n    fetch('https://wetrakph-api.firebaseapp.com/api/v1/devices')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      console.log(data['devices'][0]);\r\n      this.state.devices.push(data['devices']);\r\n      //this.setState({ devices: data['devices'] })\r\n      console.log(this.state.devices);\r\n    })\r\n    .catch(console.log)\r\n  }\r\n  render() {\r\n    const { isLoggingOut, logoutError } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <h1>This is your app's protected area.</h1>\r\n        <p>Any routes here will also be protected</p>\r\n        <button onClick={this.handleLogout}>Logout</button>\r\n        {isLoggingOut && <p>Logging Out....</p>}\r\n        {logoutError && <p>Error logging out</p>}\r\n        <Devices devices={this.state.devices} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoggingOut: state.auth.isLoggingOut,\r\n    logoutError: state.auth.logoutError\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { loginUser } from \"../actions/auth\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst styles = () => ({\r\n  \"@global\": {\r\n    body: {\r\n      backgroundColor: \"#fff\"\r\n    }\r\n  },\r\n  paper: {\r\n    marginTop: 100,\r\n    display: \"flex\",\r\n    padding: 20,\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  avatar: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    backgroundColor: \"#f50057\"\r\n  },\r\n  form: {\r\n    marginTop: 1\r\n  },\r\n  errorText: {\r\n    color: \"#f50057\",\r\n    marginBottom: 5,\r\n    textAlign: \"center\"\r\n  }\r\n});\r\n\r\nclass Login extends Component {\r\n  state = { email: \"\", password: \"\" };\r\n\r\n  handleEmailChange = ({ target }) => {\r\n    this.setState({ email: target.value });\r\n  };\r\n\r\n  handlePasswordChange = ({ target }) => {\r\n    this.setState({ password: target.value });\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    const { dispatch } = this.props;\r\n    const { email, password } = this.state;\r\n\r\n    dispatch(loginUser(email, password));\r\n  };\r\n\r\n  render() {\r\n    const { classes, loginError, isAuthenticated } = this.props;\r\n    if (isAuthenticated) {\r\n      return <Redirect to=\"/\" />;\r\n    } else {\r\n      return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <Paper className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign in\r\n            </Typography>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              onChange={this.handleEmailChange}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              onChange={this.handlePasswordChange}\r\n            />\r\n            {loginError && (\r\n              <Typography component=\"p\" className={classes.errorText}>\r\n                Incorrect email or password.\r\n              </Typography>\r\n            )}\r\n            <Button\r\n              type=\"button\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              onClick={this.handleSubmit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n          </Paper>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoggingIn: state.auth.isLoggingIn,\r\n    loginError: state.auth.loginError,\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  };\r\n}\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps)(Login));\r\n","import React from \"react\";\r\n\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ProtectedRoute from \"./components/ProtectedRoute\";\r\nimport Home from \"./components/Home\";\r\nimport Login from \"./components/Login\";\r\n\r\nfunction App(props) {\r\n  const { isAuthenticated, isVerifying } = props;\r\n  return (\r\n    <Switch>\r\n      <ProtectedRoute\r\n        exact\r\n        path=\"/\"\r\n        component={Home}\r\n        isAuthenticated={isAuthenticated}\r\n        isVerifying={isVerifying}\r\n      />\r\n      <Route path=\"/login\" component={Login} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    isVerifying: state.auth.isVerifying\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);","import { combineReducers } from \"redux\";\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\nimport auth from \"./auth\";\r\n\r\nconst rootReducer = combineReducers({\r\n  firebase: firebaseReducer,\r\n  auth: auth,\r\n})\r\n\r\nexport default rootReducer;\r\n","import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  LOGOUT_REQUEST,\r\n  LOGOUT_SUCCESS,\r\n  LOGOUT_FAILURE,\r\n  VERIFY_REQUEST,\r\n  VERIFY_SUCCESS\r\n} from \"../actions/auth/\";\r\n\r\nexport default (\r\n  state = {\r\n    isLoggingIn: false,\r\n    isLoggingOut: false,\r\n    isVerifying: false,\r\n    loginError: false,\r\n    logoutError: false,\r\n    isAuthenticated: false,\r\n    user: {}\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoggingIn: true,\r\n        loginError: false\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isAuthenticated: true,\r\n        user: action.user\r\n      };\r\n    case LOGIN_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isAuthenticated: false,\r\n        loginError: true\r\n      };\r\n    case LOGOUT_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoggingOut: true,\r\n        logoutError: false\r\n      };\r\n    case LOGOUT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n        isAuthenticated: false,\r\n        user: {}\r\n      };\r\n    case LOGOUT_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n        logoutError: true\r\n      };\r\n    case VERIFY_REQUEST:\r\n      return {\r\n        ...state,\r\n        isVerifying: true,\r\n        verifyingError: false\r\n      };\r\n    case VERIFY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isVerifying: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport configureStore from \"./configureStore\";\r\n\r\nconst store = configureStore();\r\n\r\nfunction Root() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default Root;","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport { verifyAuth } from \"./actions/auth\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default function configureStore(persistedState) {\r\n  const store = createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    applyMiddleware(thunkMiddleware)\r\n  );\r\n  store.dispatch(verifyAuth());\r\n  return store;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Root from \"./Root\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Root />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}